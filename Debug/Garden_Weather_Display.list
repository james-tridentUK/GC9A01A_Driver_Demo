
Garden_Weather_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800035c  08000364  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800035c  0800035c  00010364  2**0
                  CONTENTS
  4 .ARM          00000000  0800035c  0800035c  00010364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800035c  08000364  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000364  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000364  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010364  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010394  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000508  00000000  00000000  000103d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002c2  00000000  00000000  000108df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00010ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000070  00000000  00000000  00010c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000002dd  00000000  00000000  00010cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001257  00000000  00000000  00010fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004fd48  00000000  00000000  000121fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000160  00000000  00000000  00061f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000620a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000344 	.word	0x08000344

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000344 	.word	0x08000344

080001d4 <main>:
#else
#define UART_DISPLAY int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	/*Enable the floating point unit*/
	FPU_Enable();
 80001d8:	f000 f804 	bl	80001e4 <FPU_Enable>

	/*Init the timebase*/
	Time_Timebase_Init();
 80001dc:	f000 f83a 	bl	8000254 <Time_Timebase_Init>


    /* Loop forever */
	for(;;);
 80001e0:	e7fe      	b.n	80001e0 <main+0xc>
	...

080001e4 <FPU_Enable>:
/**
 * @brief Enables the floating point unit
 *
 */
void FPU_Enable(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <FPU_Enable+0x50>)
 80001ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001ee:	4a11      	ldr	r2, [pc, #68]	; (8000234 <FPU_Enable+0x50>)
 80001f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<21);
 80001f8:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <FPU_Enable+0x50>)
 80001fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001fe:	4a0d      	ldr	r2, [pc, #52]	; (8000234 <FPU_Enable+0x50>)
 8000200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<22);
 8000208:	4b0a      	ldr	r3, [pc, #40]	; (8000234 <FPU_Enable+0x50>)
 800020a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800020e:	4a09      	ldr	r2, [pc, #36]	; (8000234 <FPU_Enable+0x50>)
 8000210:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<23);
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <FPU_Enable+0x50>)
 800021a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800021e:	4a05      	ldr	r2, [pc, #20]	; (8000234 <FPU_Enable+0x50>)
 8000220:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	e000ed00 	.word	0xe000ed00

08000238 <tick_increment>:
static void tick_increment(void);
/************************************
 * STATIC FUNCTIONS
 ************************************/
static void tick_increment(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <tick_increment+0x18>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	3301      	adds	r3, #1
 8000242:	4a03      	ldr	r2, [pc, #12]	; (8000250 <tick_increment+0x18>)
 8000244:	6013      	str	r3, [r2, #0]
}
 8000246:	bf00      	nop
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	2000001c 	.word	0x2000001c

08000254 <Time_Timebase_Init>:
/**
 * @brief Init the timebase
 *
 */
void Time_Timebase_Init(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000258:	b672      	cpsid	i
}
 800025a:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per second*/
	SysTick->LOAD =  ONE_SEC_LOAD - 1;
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <Time_Timebase_Init+0x40>)
 800025e:	4a0e      	ldr	r2, [pc, #56]	; (8000298 <Time_Timebase_Init+0x44>)
 8000260:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <Time_Timebase_Init+0x40>)
 8000264:	2200      	movs	r2, #0
 8000266:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <Time_Timebase_Init+0x40>)
 800026a:	2204      	movs	r2, #4
 800026c:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 800026e:	4b09      	ldr	r3, [pc, #36]	; (8000294 <Time_Timebase_Init+0x40>)
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	4a08      	ldr	r2, [pc, #32]	; (8000294 <Time_Timebase_Init+0x40>)
 8000274:	f043 0302 	orr.w	r3, r3, #2
 8000278:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <Time_Timebase_Init+0x40>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a05      	ldr	r2, [pc, #20]	; (8000294 <Time_Timebase_Init+0x40>)
 8000280:	f043 0301 	orr.w	r3, r3, #1
 8000284:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000286:	b662      	cpsie	i
}
 8000288:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 800028a:	bf00      	nop
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	e000e010 	.word	0xe000e010
 8000298:	00f423ff 	.word	0x00f423ff

0800029c <SysTick_Handler>:
/**
 * @brief Routine handler for systick increment
 *
 */
void SysTick_Handler(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	tick_increment();
 80002a0:	f7ff ffca 	bl	8000238 <tick_increment>
}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 f811 	bl	80002fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ff7b 	bl	80001d4 <main>

080002de <LoopForever>:

LoopForever:
  b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000364 	.word	0x08000364
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	20000020 	.word	0x20000020

080002f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>
	...

080002fc <__libc_init_array>:
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	4d0d      	ldr	r5, [pc, #52]	; (8000334 <__libc_init_array+0x38>)
 8000300:	4c0d      	ldr	r4, [pc, #52]	; (8000338 <__libc_init_array+0x3c>)
 8000302:	1b64      	subs	r4, r4, r5
 8000304:	10a4      	asrs	r4, r4, #2
 8000306:	2600      	movs	r6, #0
 8000308:	42a6      	cmp	r6, r4
 800030a:	d109      	bne.n	8000320 <__libc_init_array+0x24>
 800030c:	4d0b      	ldr	r5, [pc, #44]	; (800033c <__libc_init_array+0x40>)
 800030e:	4c0c      	ldr	r4, [pc, #48]	; (8000340 <__libc_init_array+0x44>)
 8000310:	f000 f818 	bl	8000344 <_init>
 8000314:	1b64      	subs	r4, r4, r5
 8000316:	10a4      	asrs	r4, r4, #2
 8000318:	2600      	movs	r6, #0
 800031a:	42a6      	cmp	r6, r4
 800031c:	d105      	bne.n	800032a <__libc_init_array+0x2e>
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f855 3b04 	ldr.w	r3, [r5], #4
 8000324:	4798      	blx	r3
 8000326:	3601      	adds	r6, #1
 8000328:	e7ee      	b.n	8000308 <__libc_init_array+0xc>
 800032a:	f855 3b04 	ldr.w	r3, [r5], #4
 800032e:	4798      	blx	r3
 8000330:	3601      	adds	r6, #1
 8000332:	e7f2      	b.n	800031a <__libc_init_array+0x1e>
 8000334:	0800035c 	.word	0x0800035c
 8000338:	0800035c 	.word	0x0800035c
 800033c:	0800035c 	.word	0x0800035c
 8000340:	08000360 	.word	0x08000360

08000344 <_init>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

08000350 <_fini>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr
